import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler
from telegram.ext._context import CallbackContext
from loguru import logger
import os
from dotenv import load_dotenv
from .browser import BrowserHandler
import time

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class AppointmentBot:
    def __init__(self):
        self.token = os.getenv('BOT_TOKEN')
        if not self.token:
            raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            
        self.browser = BrowserHandler(headless=True)
        self.checking = False
        self.driver = None
        
    async def start(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        if update.message:
            await update.message.reply_text(
                "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –∑–∞–ø–∏—Å–∏ –≤ LBV.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /check –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏"
            )

    async def check_command(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /check"""
        if not update.message:
            return
            
        if self.checking:
            await update.message.reply_text("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞!")
            return
            
        self.checking = True
        await update.message.reply_text("–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–ª–æ—Ç–æ–≤...")
        
        try:
            self.driver = self.browser.init_driver()
            while self.checking:
                try:
                    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    self.driver.get("https://www.berlin.de/labo/mobil/dienstleistungen/termin/")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ—Ç—ã
                    has_slots, message = self.browser.check_slots(self.driver)
                    
                    if has_slots and update.message:
                        await update.message.reply_text(
                            f"üéâ –ù–∞–π–¥–µ–Ω—ã —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã!\n{message}\n"
                            "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: https://www.berlin.de/labo/mobil/dienstleistungen/termin/"
                        )
                        break
                    
                    # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                    await asyncio.sleep(60)
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
                    if update.message:
                        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
                    break
                    
        finally:
            self.checking = False
            if self.driver:
                self.browser.close(self.driver)
                self.driver = None

    async def stop_command(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop"""
        if not update.message:
            return
            
        if not self.checking:
            await update.message.reply_text("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞!")
            return
            
        self.checking = False
        await update.message.reply_text("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É...")
        
        if self.driver:
            self.browser.close(self.driver)
            self.driver = None

    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        try:
            application = Application.builder().token(self.token).build()
            
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
            application.add_handler(CommandHandler("start", self.start))
            application.add_handler(CommandHandler("check", self.check_command))
            application.add_handler(CommandHandler("stop", self.stop_command))
            
            # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
            application.run_polling()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}")

if __name__ == "__main__":
    bot = AppointmentBot()
    bot.run() 