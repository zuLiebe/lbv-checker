import time
import random
import json
import sys
import os
import requests
from datetime import datetime
from loguru import logger
from browser_manager.browser import BrowserHandler
from config.config import TELEGRAM_TOKEN
from utils.notification import send_telegram_notification, load_chat_ids

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.remove()
logger.add(sys.stdout, level="INFO")
logger.add("booking_monitor.log", rotation="1 day", level="INFO")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
HISTORY_FILE = "booking_history.json"
LAST_NOTIFICATION_FILE = "last_notification.json"
RANDOM_INTERVAL_MIN = 120  # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (2 –º–∏–Ω—É—Ç—ã)
RANDOM_INTERVAL_MAX = 240  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (4 –º–∏–Ω—É—Ç—ã)

def save_booking_status(status, message):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ—Ç–∞—Ö –≤ –∏—Å—Ç–æ—Ä–∏—é"""
    try:
        history = []
        if os.path.exists(HISTORY_FILE):
            with open(HISTORY_FILE, "r") as f:
                history = json.load(f)
                
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        history.append({
            "timestamp": datetime.now().isoformat(),
            "available": status,
            "message": message
        })
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 100 –∑–∞–ø–∏—Å—è–º–∏
        if len(history) > 100:
            history = history[-100:]
            
        with open(HISTORY_FILE, "w") as f:
            json.dump(history, f, indent=2)
            
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        return False

def should_send_notification(status, message):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
    # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å True (–Ω–∞–π–¥–µ–Ω—ã —Å–ª–æ—Ç—ã), –≤—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    if status:
        return True
        
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if os.path.exists(LAST_NOTIFICATION_FILE):
            with open(LAST_NOTIFICATION_FILE, "r") as f:
                last_notification = json.load(f)
                
            last_time = datetime.fromisoformat(last_notification["timestamp"])
            hours_passed = (datetime.now() - last_time).total_seconds() / 3600
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ —á–∞—â–µ —Ä–∞–∑–∞ –≤ 6 —á–∞—Å–æ–≤ –¥–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if hours_passed < 6 and not status:
                return False
                
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return True

def save_notification_time():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    try:
        data = {
            "timestamp": datetime.now().isoformat()
        }
        with open(LAST_NOTIFICATION_FILE, "w") as f:
            json.dump(data, f)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False

def check_booking_availability():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    browser = BrowserHandler(headless=False)  # headless=True –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
    driver = browser.init_driver()
    
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–ª–æ—Ç–æ–≤...")
        available, message = browser.run_selenium_side_script(driver)
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å={available}, –°–æ–æ–±—â–µ–Ω–∏–µ={message}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
        save_booking_status(available, message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if should_send_notification(available, message):
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            notification_text = f"üîî *–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–ª–æ—Ç–æ–≤*\n\n"
            
            if available:
                notification_text += f"‚úÖ *–ù–ê–ô–î–ï–ù–´ –î–û–°–¢–£–ü–ù–´–ï –°–õ–û–¢–´!*\n\n{message}\n\n–°—Ä–æ—á–Ω–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!"
            else:
                notification_text += f"‚ùå –°–ª–æ—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n\n{message}"
                
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            send_telegram_notification(notification_text)
            save_notification_time()
        
        return available, message
    finally:
        # –î–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏
        if not browser.headless:
            time.sleep(5)
        browser.close(driver)
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

def run_monitoring():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
    logger.info("–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ª–æ—Ç–æ–≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    try:
        while True:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            check_booking_availability()
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç 2 –¥–æ 4 –º–∏–Ω—É—Ç
            interval = random.randint(RANDOM_INTERVAL_MIN, RANDOM_INTERVAL_MAX)
            logger.info(f"–°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {interval} —Å–µ–∫—É–Ω–¥")
            
            # –û–∂–∏–¥–∞–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            time.sleep(interval)
    except KeyboardInterrupt:
        logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        # –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É
        time.sleep(60)
        run_monitoring()  # —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞

# –ó–∞–º–µ–Ω—è–µ–º –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ –±–æ—Ç–∞
def start_monitoring():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ª–æ—Ç–æ–≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ª–æ—Ç–æ–≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
    run_monitoring()

if __name__ == "__main__":
    # –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ñ–∞–π–ª–∞ –∫–∞–∫ —Å–∫—Ä–∏–ø—Ç–∞, –≤—ã–≤–æ–¥–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    print("""
–≠—Ç–æ—Ç —Ñ–∞–π–ª –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞.
–î–ª—è –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Telegram-–±–æ—Ç–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π '—Å—Ç–∞—Ä—Ç'.

–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞–ø—Ä—è–º—É—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
  python -c "from booking_monitor import start_monitoring; start_monitoring()"
""") 