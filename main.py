import os
import sys
from loguru import logger
import time
import signal
import asyncio
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters
)

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞
from config import config
from utils.logger import setup_logger
from utils.helpers import create_project_dirs
from database.db_handler import DatabaseHandler
from browser_manager.browser import BrowserHandler
from browser_manager.actions import BookingChecker
from telegram_bot.bot import TelegramBot
from core.slot_checker import SlotChecker
from core.notifications import NotificationManager
from config.settings import settings
from metrics.prometheus import ACTIVE_CHECKS

# –§–ª–∞–≥ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
should_exit = False

class BookingBot:
    """
    Main application class that handles bot commands and monitoring.
    """
    
    def __init__(self):
        self.slot_checker = SlotChecker()
        self.notifier = NotificationManager()
        self.db = DatabaseHandler()
        self.active_monitors = {}  # chat_id -> monitoring task
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /start command."""
        chat_id = update.effective_chat.id
        
        # –û—Å—Ç–∞–Ω–æ–≤–∏–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –µ—Å–ª–∏ –µ—Å—Ç—å
        await self.stop_monitoring(chat_id)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
        keyboard = [
            ["–Ω–µ–¥–µ–ª—è", "–¥–≤–µ –Ω–µ–¥–µ–ª–∏"],
            ["–º–µ—Å—è—Ü", "–ª—é–±–æ–π –ø–µ—Ä–∏–æ–¥"]
        ]
        
        await context.bot.send_message(
            chat_id=chat_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:",
            reply_markup={"keyboard": keyboard, "one_time_keyboard": True}
        )
        
    async def handle_range_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle date range selection."""
        chat_id = update.effective_chat.id
        selected_range = update.message.text.lower()
        
        range_mapping = {
            "–Ω–µ–¥–µ–ª—è": "week",
            "–¥–≤–µ –Ω–µ–¥–µ–ª–∏": "two_weeks",
            "–º–µ—Å—è—Ü": "month",
            "–ª—é–±–æ–π –ø–µ—Ä–∏–æ–¥": "any"
        }
        
        preferred_range = range_mapping.get(selected_range)
        if not preferred_range:
            await context.bot.send_message(
                chat_id=chat_id,
                text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏."
            )
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.db.update_user_preferred_dates(chat_id, preferred_range)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        await self.start_monitoring(chat_id, preferred_range)
        
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!\n"
                 f"üìÖ –í—ã–±—Ä–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: {selected_range}\n"
                 f"‚ÑπÔ∏è –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–ª–æ—Ç–∞—Ö."
        )
        
    async def stop_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /stop command."""
        chat_id = update.effective_chat.id
        await self.stop_monitoring(chat_id)
        
        await context.bot.send_message(
            chat_id=chat_id,
            text="üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
        )
        
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /status command."""
        chat_id = update.effective_chat.id
        
        is_active = chat_id in self.active_monitors
        preferred_range = self.db.get_user_preferred_dates(chat_id) or "any"
        
        status_text = (
            f"üìä *–°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞*\n\n"
            f"üîÑ –ê–∫—Ç–∏–≤–µ–Ω: {'‚úÖ' if is_active else '‚ùå'}\n"
            f"üìÖ –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç: {self.slot_checker._get_range_text(preferred_range)}\n"
            f"üë• –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫: {len(self.active_monitors)}"
        )
        
        await context.bot.send_message(
            chat_id=chat_id,
            text=status_text,
            parse_mode='Markdown'
        )
        
    async def start_monitoring(self, chat_id: int, preferred_range: str):
        """Start monitoring for a specific user."""
        if chat_id in self.active_monitors:
            await self.stop_monitoring(chat_id)
            
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        task = asyncio.create_task(
            self.slot_checker.start_monitoring(chat_id, preferred_range)
        )
        self.active_monitors[chat_id] = task
        
    async def stop_monitoring(self, chat_id: int):
        """Stop monitoring for a specific user."""
        if chat_id in self.active_monitors:
            task = self.active_monitors.pop(chat_id)
            self.slot_checker.stop_event.set()
            await task
            self.slot_checker.stop_event.clear()
            
    async def stop_all_monitoring(self):
        """Stop all monitoring tasks."""
        tasks = []
        for chat_id in list(self.active_monitors.keys()):
            tasks.append(self.stop_monitoring(chat_id))
        if tasks:
            await asyncio.gather(*tasks)

def signal_handler(sig, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (Ctrl+C)."""
    global should_exit
    logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
    should_exit = True

def main():
    """Main application entry point."""
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logger.add(
            "logs/app.log",
            rotation="1 day",
            retention="7 days",
            level="INFO"
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        bot = BookingBot()
        application = Application.builder().token(settings.notifications.telegram_token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", bot.start_command))
        application.add_handler(CommandHandler("stop", bot.stop_command))
        application.add_handler(CommandHandler("status", bot.status_command))
        application.add_handler(
            MessageHandler(
                filters.TEXT & ~filters.COMMAND,
                bot.handle_range_selection
            )
        )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        def signal_handler(signum, frame):
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...")
            asyncio.create_task(bot.stop_all_monitoring())
            application.stop()
            sys.exit(0)
            
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        application.run_polling()
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 