from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, CallbackQueryHandler
from loguru import logger
import threading
import time
import random
import schedule
from browser_manager.browser import BrowserHandler
from utils.notification import send_telegram_notification, load_last_message_ids, save_last_message_ids, send_photo_with_caption, load_chat_ids
from booking_monitor import check_booking_availability, save_booking_status, should_send_notification, save_notification_time
import os

class TelegramBot:
    def __init__(self, token, db_handler, booking_checker, config):
        self.token = token
        self.db_handler = db_handler
        self.booking_checker = booking_checker
        self.config = config
        self.updater = None
        self.is_checking = False
        self.check_thread = None
        self.scheduler_thread = None
        self.stop_event = threading.Event()
    
    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram –±–æ—Ç–∞."""
        self.updater = Updater(self.token)
        dp = self.updater.dispatcher
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        dp.add_handler(CommandHandler("start", self.cmd_start))
        dp.add_handler(CommandHandler("help", self.cmd_help))
        dp.add_handler(MessageHandler(Filters.text & ~Filters.command, self.handle_message))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è CallbackQuery (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏)
        dp.add_handler(CallbackQueryHandler(self.button_callback))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        dp.add_error_handler(self.error_handler)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        self.updater.start_polling()
        logger.info("Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Telegram –±–æ—Ç–∞."""
        if self.updater:
            self.updater.stop()
            logger.info("Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        self.stop_checking()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        save_last_message_ids()
    
    def cmd_start(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start."""
        user = update.effective_user
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        self.db_handler.add_user(
            user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        from config.config import add_chat_id
        add_chat_id(user.id)
        
        message = (
            f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}!\n\n"
            f"–Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–ª–æ—Ç–æ–≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–∞–π—Ç–µ LBV.\n\n"
            f"–ö–æ–º–∞–Ω–¥—ã:\n"
            f"*—Å—Ç–∞—Ä—Ç* - –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n"
            f"*—Å—Ç–æ–ø* - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n"
            f"*—Å—Ç–∞—Ç—É—Å* - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
            f"*–ø—Ä–æ–≤–µ—Ä–∏—Ç—å* - –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É\n\n"
            f"–Ø –±—É–¥—É —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å, –∫–æ–≥–¥–∞ –ø–æ—è–≤—è—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."
        )
        
        update.message.reply_text(message, parse_mode='Markdown')
    
    def cmd_help(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help."""
        message = (
            "üîç *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*\n\n"
            "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É *—Å—Ç–∞—Ä—Ç* –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏\n"
            "2. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç:\n"
            "   - –õ—é–±—ã–µ –¥–∞—Ç—ã\n"
            "   - –í —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏\n"
            "   - –í —Ç–µ—á–µ–Ω–∏–µ 2 –Ω–µ–¥–µ–ª—å\n"
            "   - –í —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞\n"
            "3. –ë–æ—Ç –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 4-7 –º–∏–Ω—É—Ç\n"
            "4. –ü—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n"
            "5. –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ *—Å—Ç–æ–ø*\n\n"
            "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "*–ø—Ä–æ–≤–µ—Ä–∏—Ç—å* - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–æ–≤ —Å–µ–π—á–∞—Å\n"
            "*—Å—Ç–∞—Ç—É—Å* - —É–∑–Ω–∞—Ç—å, –∞–∫—Ç–∏–≤–Ω—ã –ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏\n"
        )
        
        update.message.reply_text(message, parse_mode='Markdown')
    
    def handle_message(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        try:
            message = update.message.text.lower().strip()
            user_id = update.effective_user.id
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {message}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                self.db_handler.update_user_activity(user_id)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã
            if message in ['—Å—Ç–∞—Ä—Ç', 'start', '–∑–∞–ø—É—Å—Ç–∏—Ç—å', '–Ω–∞—á–∞—Ç—å']:
                update.message.reply_text("–ó–∞–ø—É—Å–∫–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –≤–∏–¥–∏–º–æ–º —Ä–µ–∂–∏–º–µ...", parse_mode='Markdown')
                self.run_background_monitoring(update, context)
                
            elif message in ['—Å—Ç–æ–ø', 'stop', '–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', '—Ö–≤–∞—Ç–∏—Ç']:
                self.stop_checking(update, context)
                
            elif message in ['—Å—Ç–∞—Ç—É—Å', 'status']:
                self.check_status(update, context)
                
            elif message in ['–ø—Ä–æ–≤–µ—Ä–∏—Ç—å', 'check', '—Ç–µ—Å—Ç', 'test']:
                update.message.reply_text("–ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤ –≤–∏–¥–∏–º–æ–º —Ä–µ–∂–∏–º–µ...", parse_mode='Markdown')
                self.run_single_check(update, context)
                
            else:
                update.message.reply_text(
                    "–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                    "*—Å—Ç–∞—Ä—Ç* - –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n"
                    "*—Å—Ç–æ–ø* - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n"
                    "*—Å—Ç–∞—Ç—É—Å* - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
                    "*–ø—Ä–æ–≤–µ—Ä–∏—Ç—å* - –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É",
                    parse_mode='Markdown'
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            try:
                update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
            except:
                pass
    
    def stop_checking(self, update=None, context=None):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–ª–æ—Ç–æ–≤."""
        if not self.is_checking:
            if update:
                update.message.reply_text("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
            return
        
        self.stop_event.set()
        self.is_checking = False
        
        if update:
            update.message.reply_text("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        
        logger.info("–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    
    def check_status(self, update, context):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏."""
        status = "‚úÖ –∞–∫—Ç–∏–≤–Ω–∞" if self.is_checking else "‚ùå –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞"
        update.message.reply_text(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–ª–æ—Ç–æ–≤: {status}")
    
    def run_single_check(self, update=None, context=None):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–Ω—É –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–ª–æ—Ç–æ–≤."""
        if update:
            update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=self.perform_single_check, args=(update,))
        thread.daemon = True
        thread.start()
    
    def perform_single_check(self, update, context):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–ª–æ—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        chat_id = update.effective_chat.id
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            self.db_handler.update_user_activity(update.effective_user.id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        
        message = update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤...", parse_mode='Markdown')
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±—Ä–∞—É–∑–µ—Ä —Å –±–æ–ª—å—à–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
            browser = BrowserHandler(headless=False, timeout=60)
            driver = browser.init_driver()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
            available, msg = browser.run_selenium_side_script(driver, [chat_id])  # –ü–µ—Ä–µ–¥–∞–µ–º chat_id —Å–ø–∏—Å–∫–æ–º
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å={available}, –°–æ–æ–±—â–µ–Ω–∏–µ={msg}")
            
            if available:
                # –ù–∞–π–¥–µ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
                update.message.reply_text(f"‚úÖ *{msg}*", parse_mode='Markdown')
                logger.info(f"–ù–∞–π–¥–µ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã! –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: [{chat_id}]")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                send_telegram_notification(
                    chat_id,
                    f"üö® *{msg}*",
                    "current_state.png",
                    self.config['TELEGRAM_TOKEN']
                )
            else:
                # –°–ª–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                update.message.reply_text(f"‚ùå {msg}", parse_mode='Markdown')
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
            browser.close(driver)
            return available, msg
        except Exception as e:
            update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {str(e)}")
    
    def run_background_monitoring(self, update, context):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ."""
        chat_id = update.effective_chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        if self.is_checking:
            update.message.reply_text("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")
            return
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
        self.ask_date_range(update, context)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        context.user_data['starting_monitoring'] = True
    
    def ask_date_range(self, update: Update, context: CallbackContext):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
        keyboard = [
            [InlineKeyboardButton("–õ—é–±—ã–µ –¥–∞—Ç—ã", callback_data='date_range_any')],
            [InlineKeyboardButton("–í —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏", callback_data='date_range_week')],
            [InlineKeyboardButton("–í —Ç–µ—á–µ–Ω–∏–µ 2 –Ω–µ–¥–µ–ª—å", callback_data='date_range_two_weeks')],
            [InlineKeyboardButton("–í —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞", callback_data='date_range_month')]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.\n\n"
            "–í—ã –ø–æ–ª—É—á–∏—Ç–µ <b>—Å—Ä–æ—á–Ω–æ–µ</b> —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è —Å–ª–æ—Ç—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ.",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    
    def error_handler(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞."""
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {update}: {context.error}")
        
        # –ï—Å–ª–∏ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if update and update.effective_chat:
            try:
                update.effective_message.reply_text(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
            except:
                pass
    
    def button_callback(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏."""
        query = update.callback_query
        query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
        
        callback_data = query.data
        chat_id = query.message.chat_id
        
        if callback_data.startswith('date_range_'):
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç
            date_range = callback_data.replace('date_range_', '')
            
            if date_range == 'any':
                message = "–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è <b>–ª—é–±—ã—Ö –¥–∞—Ç</b>.\n\n–ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É..."
                readable_range = "–ª—é–±—ã–µ –¥–∞—Ç—ã"
            elif date_range == 'week':
                message = "–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –¥–∞—Ç <b>–≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏</b>.\n\n–ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É..."
                readable_range = "–≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏"
            elif date_range == 'two_weeks':
                message = "–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –¥–∞—Ç <b>–≤ —Ç–µ—á–µ–Ω–∏–µ 2 –Ω–µ–¥–µ–ª—å</b>.\n\n–ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É..."
                readable_range = "–≤ —Ç–µ—á–µ–Ω–∏–µ 2 –Ω–µ–¥–µ–ª—å"
            elif date_range == 'month':
                message = "–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –¥–∞—Ç <b>–≤ —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞</b>.\n\n–ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É..."
                readable_range = "–≤ —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞"
            else:
                message = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω. –í—ã–±—Ä–∞–Ω—ã <b>–ª—é–±—ã–µ –¥–∞—Ç—ã</b>.\n\n–ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É..."
                date_range = 'any'
                readable_range = "–ª—é–±—ã–µ –¥–∞—Ç—ã"
            
            query.edit_message_text(
                text=message,
                parse_mode='HTML'
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.db_handler.update_user_preferred_dates(chat_id, date_range)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º
            self.start_monitoring_with_range(chat_id, date_range)
    
    def start_monitoring_with_range(self, chat_id, date_range):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º –¥–∞—Ç."""
        # –í–∫–ª—é—á–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        self.db_handler.update_checking_status(chat_id, True)
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ—Ç–æ–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
        self.stop_event.set()
        if self.check_thread and self.check_thread.is_alive():
            self.check_thread.join(1)
        self.stop_event.clear()
        
        self.is_checking = True
        
        def monitoring_thread():
            """–§—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞, –∑–∞–ø—É—Å–∫–∞–µ–º–∞—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
            current_chat_id = chat_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —á–∞—Ç–∞, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∞ –∫–æ–º–∞–Ω–¥–∞
            max_errors = 3
            consecutive_errors = 0
            first_run = True
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
            load_last_message_ids()
            
            # –ü–æ–ª—É—á–∞–µ–º chat_ids –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
            chat_ids = [current_chat_id]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            from config.config import TELEGRAM_TOKEN
            token = TELEGRAM_TOKEN
            
            while not self.stop_event.is_set():
                try:
                    if consecutive_errors >= max_errors:
                        logger.warning(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ ({max_errors}). –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.")
                        send_telegram_notification(
                            current_chat_id,
                            "‚ö†Ô∏è *–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑-–∑–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –æ—à–∏–±–æ–∫*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π '—Å—Ç–∞—Ä—Ç'",
                            None,
                            token
                        )
                        break
                    
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±—Ä–∞—É–∑–µ—Ä
                    browser = BrowserHandler(headless=False, timeout=60)
                    driver = browser.init_driver()
                    
                    try:
                        # –ü–µ—Ä–µ–¥–∞–µ–º chat_ids –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
                        result = browser.run_selenium_side_script(driver, [current_chat_id])  # –ü–µ—Ä–µ–¥–∞–µ–º ID —á–∞—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ
                        
                        # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                        if isinstance(result, tuple) and len(result) == 2:
                            available, message = result
                        else:
                            available, message = False, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏"
                        
                        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
                        consecutive_errors = 0
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                        self.db_handler.save_check_result(available, message)
                        
                        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å={available}, —Å–æ–æ–±—â–µ–Ω–∏–µ={message}")
                        
                        # –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Å–æ–æ–±—â–∞–µ–º, —á—Ç–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç
                        if first_run:
                            send_telegram_notification(
                                current_chat_id,
                                "‚úÖ *–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç*\n\n–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ —Å–ª–æ—Ç–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ.",
                                None,
                                token
                            )
                            first_run = False
                        
                    finally:
                        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
                        browser.close(driver)
                    
                    # –í–°–ï–ì–î–ê –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    wait_time = random.randint(240, 420)  # 4-7 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
                    logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏")
                    
                    for _ in range(wait_time):
                        if self.stop_event.is_set():
                            break
                        time.sleep(1)
                
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                    consecutive_errors += 1
                    time.sleep(30)  # –ö–æ—Ä–æ—Ç–∫–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
            
            # –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ü–∏–∫–ª–∞
            self.is_checking = False
            self.db_handler.update_checking_status(current_chat_id, False)
            logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.check_thread = threading.Thread(target=monitoring_thread)
        self.check_thread.daemon = True
        self.check_thread.start()
        logger.info(f"–§–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} —Å –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º –¥–∞—Ç {date_range}") 