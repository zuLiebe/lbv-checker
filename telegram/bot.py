from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
from loguru import logger
import threading
import time
import schedule
from browser_manager.browser import BrowserHandler
from browser_manager.actions import BookingChecker
from config.config import add_chat_id

class TelegramBot:
    def __init__(self, token, db_handler, booking_checker, config):
        self.token = token
        self.db_handler = db_handler
        self.booking_checker = booking_checker
        self.config = config
        self.updater = None
        self.is_checking = False
        self.check_thread = None
        self.scheduler_thread = None
        self.stop_event = threading.Event()
    
    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram –±–æ—Ç–∞."""
        self.updater = Updater(self.token)
        dp = self.updater.dispatcher
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        dp.add_handler(CommandHandler("start", self.cmd_start))
        dp.add_handler(CommandHandler("help", self.cmd_help))
        dp.add_handler(MessageHandler(Filters.text & ~Filters.command, self.handle_message))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        self.updater.start_polling()
        logger.info("Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Telegram –±–æ—Ç–∞."""
        if self.updater:
            self.updater.stop()
            logger.info("Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        self.stop_checking()
    
    def cmd_start(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start."""
        user = update.effective_user
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        self.db_handler.add_user(
            user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        add_chat_id(user.id)
        
        message = (
            f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}!\n\n"
            f"–Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–ª–æ—Ç–æ–≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–∞–π—Ç–µ LBV.\n\n"
            f"–ö–æ–º–∞–Ω–¥—ã:\n"
            f"*—Å—Ç–∞—Ä—Ç* - –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É\n"
            f"*—Å—Ç–æ–ø* - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É\n"
            f"*—Å—Ç–∞—Ç—É—Å* - —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å\n"
            f"*–ø—Ä–æ–≤–µ—Ä–∏—Ç—å* - –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–Ω—É –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ–π—á–∞—Å\n\n"
            f"–Ø –±—É–¥—É —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å, –∫–æ–≥–¥–∞ –ø–æ—è–≤—è—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."
        )
        
        update.message.reply_text(message, parse_mode='Markdown')
    
    def cmd_help(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help."""
        message = (
            "üîç *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*\n\n"
            "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É *—Å—Ç–∞—Ä—Ç* –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏\n"
            "2. –ë–æ—Ç –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç\n"
            "3. –ü—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n"
            "4. –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ *—Å—Ç–æ–ø*\n\n"
            "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "*–ø—Ä–æ–≤–µ—Ä–∏—Ç—å* - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–æ–≤ —Å–µ–π—á–∞—Å\n"
            "*—Å—Ç–∞—Ç—É—Å* - —É–∑–Ω–∞—Ç—å, –∞–∫—Ç–∏–≤–Ω—ã –ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏\n"
        )
        
        update.message.reply_text(message, parse_mode='Markdown')
    
    def handle_message(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        text = update.message.text.lower().strip()
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø
        if self.config.ALLOWED_USER_IDS and user_id not in self.config.ALLOWED_USER_IDS:
            update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.", parse_mode='Markdown')
            return
        
        if text == "—Å—Ç–∞—Ä—Ç":
            self.run_background_monitoring(update, context)
        elif text == "—Å—Ç–æ–ø":
            self.stop_checking(update, context)
        elif text == "—Å—Ç–∞—Ç—É—Å":
            self.check_status(update, context)
        elif text == "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å":
            self.run_single_check(update, context)
        else:
            update.message.reply_text(
                "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "*—Å—Ç–∞—Ä—Ç* - –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É\n"
                "*—Å—Ç–æ–ø* - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É\n"
                "*—Å—Ç–∞—Ç—É—Å* - —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å\n"
                "*–ø—Ä–æ–≤–µ—Ä–∏—Ç—å* - –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–Ω—É –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ–π—á–∞—Å",
                parse_mode='Markdown'
            )
    
    def start_checking(self, update=None, context=None):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–ª–æ—Ç–æ–≤."""
        if self.is_checking:
            if update:
                update.message.reply_text("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞!")
            return
        
        self.is_checking = True
        self.stop_event.clear()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        self.scheduler_thread = threading.Thread(target=self.run_scheduler)
        self.scheduler_thread.daemon = True
        self.scheduler_thread.start()
        
        if update:
            update.message.reply_text(
                f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞! –ë—É–¥—É –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ—Ç–æ–≤ –∫–∞–∂–¥—ã–µ {self.config.CHECK_INTERVAL//60} –º–∏–Ω—É—Ç."
            )
        
        logger.info(f"–ó–∞–ø—É—â–µ–Ω–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ—Ç–æ–≤ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {self.config.CHECK_INTERVAL} —Å–µ–∫.")
    
    def stop_checking(self, update=None, context=None):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–ª–æ—Ç–æ–≤."""
        if not self.is_checking:
            if update:
                update.message.reply_text("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
            return
        
        self.stop_event.set()
        self.is_checking = False
        
        if update:
            update.message.reply_text("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        
        logger.info("–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    
    def check_status(self, update, context):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏."""
        status = "‚úÖ –∞–∫—Ç–∏–≤–Ω–∞" if self.is_checking else "‚ùå –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞"
        update.message.reply_text(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–ª–æ—Ç–æ–≤: {status}")
    
    def check_now(self, update=None, context=None):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–Ω—É –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–ª–æ—Ç–æ–≤."""
        if update:
            update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.check_thread = threading.Thread(target=self.perform_check, args=(update,))
        self.check_thread.daemon = True
        self.check_thread.start()
    
    def perform_check(self, update=None):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
        try:
            available, details = self.booking_checker.perform_full_check(
                self.config.DEFAULT_FIRST_NAME,
                self.config.DEFAULT_LAST_NAME,
                self.config.DEFAULT_EMAIL
            )
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            check_id = self.db_handler.log_check_result(available, details)
            
            if available:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                self.send_availability_notification(details, check_id)
            elif update:
                # –ï—Å–ª–∏ —ç—Ç–æ —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                update.message.reply_text(f"‚ùå {details}")
            
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å={available}, –¥–µ—Ç–∞–ª–∏={details}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
            if update:
                update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {str(e)}")
    
    def send_availability_notification(self, details, check_id):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–∞—Ö –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
        active_users = self.db_handler.get_active_users()
        
        message = (
            "üéâ *–î–û–°–¢–£–ü–ù–´ –°–õ–û–¢–´ –î–õ–Ø –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø!*\n\n"
            f"{details}\n\n"
            f"üîó [–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è]({self.config.SITE_URL})"
        )
        
        for user_id in active_users:
            try:
                self.updater.bot.send_message(
                    chat_id=user_id,
                    text=message,
                    parse_mode='Markdown',
                    disable_web_page_preview=False
                )
                self.db_handler.log_notification(check_id, user_id, delivered=True)
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            except Exception as e:
                self.db_handler.log_notification(check_id, user_id, delivered=False)
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    def run_scheduler(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏."""
        schedule.every(self.config.CHECK_INTERVAL).seconds.do(self.check_now)
        
        while not self.stop_event.is_set():
            schedule.run_pending()
            time.sleep(1)
        
        # –û—á–∏—â–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        schedule.clear()
    
    def run_background_monitoring(self, update=None, context=None):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ."""
        from booking_monitor import check_booking_availability, save_booking_status, should_send_notification, send_telegram_notification, save_notification_time
        import random
        import time
        
        if self.is_checking:
            if update:
                update.message.reply_text("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω!", parse_mode='Markdown')
            return
        
        self.is_checking = True
        self.stop_event.clear()
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if update:
            self.db_handler.update_checking_status(update.effective_user.id, True)
            update.message.reply_text("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω! –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø–æ—è–≤—è—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã.", parse_mode='Markdown')
        
        def monitoring_thread():
            while not self.stop_event.is_set():
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
                    browser = BrowserHandler(headless=True)  # –í —Ñ–æ–Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –≤ headless —Ä–µ–∂–∏–º–µ
                    driver = browser.init_driver()
                    
                    try:
                        logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–ª–æ—Ç–æ–≤...")
                        available, message = browser.run_selenium_side_script(driver)
                        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å={available}, –°–æ–æ–±—â–µ–Ω–∏–µ={message}")
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
                        save_booking_status(available, message)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        if should_send_notification(available, message):
                            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                            notification_text = f"üîî *–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–ª–æ—Ç–æ–≤*\n\n"
                            
                            if available:
                                notification_text += f"‚úÖ *–ù–ê–ô–î–ï–ù–´ –î–û–°–¢–£–ü–ù–´–ï –°–õ–û–¢–´!*\n\n{message}\n\n–°—Ä–æ—á–Ω–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!"
                            else:
                                notification_text += f"‚ùå –°–ª–æ—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n\n{message}"
                                
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                            send_telegram_notification(notification_text)
                            save_notification_time()
                        
                    finally:
                        browser.close(driver)
                        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                    
                    # –°–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç 2 –¥–æ 4 –º–∏–Ω—É—Ç
                    interval = random.randint(120, 240)
                    logger.info(f"–°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {interval} —Å–µ–∫—É–Ω–¥")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                    for _ in range(interval // 5):
                        if self.stop_event.is_set():
                            break
                        time.sleep(5)
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                    time.sleep(60)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É
            
            self.is_checking = False
            logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.check_thread = threading.Thread(target=monitoring_thread)
        self.check_thread.daemon = True
        self.check_thread.start() 